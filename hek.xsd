<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
        <xs:element name="AlgorithmDescription" type="AlgorithmDescription"/>
        <xs:element name="ParameterizedAlgorithmFile" type="ParameterizedAlgorithmFile"/>

        <xs:complexType name="AlgorithmDescription">
                <xs:sequence>
                        <!-- Include version number  -->
                        <xs:element type="xs:string" name="AlgorithmName"/>
                        <!-- Cadence is defined in cycles, 1 cycle = 10 seconds -->
                        <xs:element type="xs:int" name="Cadence" minOccurs="0"/>
                        <!-- Name of code.   Expected to be a .sav for IDL algorithms and in the task directory-->
                        <xs:element type="xs:string" name="CodeFilename"/>
                        <!-- Additional text for human reading, not used by system -->
                        <xs:element type="xs:string" name="Description" minOccurs="0"/>
                        <!-- List of types of input images - listed in order of call -->
                        <xs:element type="ImageInputSet" name="ImageInput" minOccurs="0"
                                maxOccurs="2"/>
                        <!-- True denotes that it will track events over a time range and report a single 
                                        composite (like the flares).  False means that it will report event at a  
                                        single timestamp for each image.  Note that this being set to true means the 
                                         algorithm COULD report open/closed events but does not mean that it necessarily will.  
                                         -->
                        <xs:element type="xs:boolean" name="StateStorage"/>
                        <!-- TriggeredByEvents - run only when some VOEvent input is received  
                                        Continuous - run only from raw images at regualar intervals 
                                        Other three modes - combinations of input and cadence triggering; 
                                        some may be taken out pending discussion..-->
                        <xs:element name="TriggerMode">
                                <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                                <xs:enumeration value="TriggeredByEvents"/>
                                                <xs:enumeration value="Continuous"/>
                                        </xs:restriction>
                                </xs:simpleType>
                        </xs:element>
                        <xs:element name="ImplementationType">
                                <xs:simpleType>
                                        <!-- Will be extended as needed -->
                                        <xs:restriction base="xs:string">
                                                <xs:enumeration value="IDL"/>
                                                <xs:enumeration value="Java"/>
                                                <xs:enumeration value="C"/>
                                                <xs:enumeration value="HEK"/>
                                        </xs:restriction>
                                </xs:simpleType>
                        </xs:element>
                        <!-- if below is true, module provides a temporary/skeletal VOEvent upon first detection, 
                                        which is superseded by a complete version when event is over.  Flare module (at least)  
                                                will use this.  Assumed to be false if not present. -->
                        <xs:element type="xs:boolean" name="ProvidesTemporaryEvents" minOccurs="0"/>
                        <!-- Definiton of input/outputs may change (potentially using more of the  
                                                VOEvent spec).  Assumes only a single type of event input.   
                                                Outputs are matched to inputs for subscriptions; this is not meant 
                                                to specify how the algorithm completes an entire VOEvent -->
                        <xs:element type="AlgorithmInput" name="InputVOEvent" minOccurs="0"
                                maxOccurs="unbounded"/>
                        <xs:element type="DataType" name="OutputVOEventType" maxOccurs="unbounded"
                                minOccurs="0"/>
                        <!-- Specifies when to make summary movies.  Is XQuery (see comments for AlgorithmInput below).   
                                      Always or True can be specified to always make movies, Never or False for opposite.  If no  
                                      condition is specified, default behavior is to never make movies.  
                                                Algorithms will get single thumbnail images if they do not get summary movies.  -->
                        <xs:element type="xs:string" name="MovieCreationCondition" minOccurs="0"/>
                        <!-- TODO: remove the minOccurs once movie creation is really enabled -->
                        <xs:element type="MovieImageParameters" name="MovieImageParameters"
                                minOccurs="0"/>
                </xs:sequence>
        </xs:complexType>

        <!-- Intermediate between AlgorithmDescription and AlgorithmInstance.  Contains code version and specific 
                values for any settable parameters. Basis of EDS coverage logging.  -->
        <xs:complexType name="ParameterizedAlgorithm">
                <xs:sequence>
                        <xs:element name="AlgorithmDescription" type="AlgorithmDescription"/>
                        <!--Should correspond to code writing out FRMVersionNumber-->
                        <xs:element name="CodeVersion" type="xs:string"/>
                        <!-- Auto-generated from adding in the code version and all param/value pairs.   
                                                Rather awkward but since the ParameterizedAlgorithm is the core of the new logging 
                                                system this was needed to make a reliable shorthand.-->
                        <xs:element name="CoverageID" type="xs:string"/>
                        <!-- A shorthand of the above that's basically a number appended to the algorithm name.   
                                                The coverage registry keeps a record of all shorthands-coverageIDs and distributes this.  
                                                Made because of file name length limitations on logs; currently is optional for testing at 
                                                SAO until they can support a coverage registry. -->
                        <xs:element name="CoverageShorthand" type="xs:string" minOccurs="0"/>
                        <xs:element name="Parameter" type="AlgorithmParameter" minOccurs="0"
                                maxOccurs="unbounded"/>
                        <!-- Should match the event types provided.  Assumed to be 0 if not present. -->
                        <xs:element name="MinimumLengthParameter" type="MinimumLengthParameter"
                                minOccurs="0" maxOccurs="unbounded"/>
                        <!-- Specifies data series/type for this run (list of filenames to run on) -->
                        <xs:element type="DataSpecificationFile" name="DataSpecificationFile"/>
                        <!-- Maximum seconds allowed for a run on a single image to complete; if exceeded command is  
                                                aborted (assumes it has crashed/hung) -->
                        <xs:element type="xs:int" name="TimeoutThreshold"/>
                        <!-- Used for those that are reporting an update of a task while system is running. -->
                        <xs:element name="ShorthandToReplace" type="xs:string" minOccurs="0"/>
                </xs:sequence>
        </xs:complexType>

        <!-- Convenience for storage of ParameterizedAlgorithms on disk.  Software reads and transforms into a 
                              ParameterizedAlgorithm reading the file (avoiding need to copy/paste bulky algorithm descriptions into 
                              each parameter specification, and reducing the chance of versioning errors -->
        <xs:complexType name="ParameterizedAlgorithmFile">
                <xs:sequence>
                        <xs:element name="AlgorithmDescriptionFile" type="xs:string"/>
                        <xs:element name="CodeVersion" type="xs:string"/>
                        <xs:element name="Parameter" type="AlgorithmParameter" minOccurs="0"
                                maxOccurs="unbounded"/>
                        <!-- Specifies data series/type for this run (list of filenames to run on); now no longer optional -->
                        <xs:element type="DataSpecificationFile" name="DataSpecificationFile"
                                minOccurs="0"/>
                        <!-- Used for those that are reporting an update of a task while system is running. -->
                        <xs:element name="ShorthandToReplace" type="xs:string" minOccurs="0"/>
                </xs:sequence>
        </xs:complexType>

        <!-- Represents changeable parameters (thresholds, etc) for algorithm.  These values will be folded into  
                      the IDL call to run the algorithm.  They should be reflected in FRMParamSet, but that must be done 
                      within the IDL code -->
        <xs:complexType name="AlgorithmParameter">
                <xs:sequence>
                        <xs:element type="xs:string" name="ParameterName"/>
                        <!-- value type: this is just specific to our common IDL implementations.  All values are stored as  
                               strings,  those with ParamValueType as "string" get single quotes in the call; those with 
                               "number" do not, those with "keyword" do not have a value and are called with /name -->
                        <xs:element type="ParamValueType" name="Type"/>
                        <xs:element type="xs:string" name="Value" minOccurs="0"/>
                        <xs:element type="xs:boolean" name="ExcludeFromCoverageID" minOccurs="0"/>
                        <!-- if defined and true, we do name=name instead of name=value to extract it. -->
                        <xs:element type="xs:boolean" name="ReturnOnly" minOccurs="0"/>
                </xs:sequence>
        </xs:complexType>
        <xs:complexType name="MinimumLengthParameter">
                <xs:sequence>
                        <!-- should be a numeric parameter, with duration in seconds as value -->
                        <xs:element name="ParameterBase" type="AlgorithmParameter"/>
                        <xs:element type="VOEventType" name="VOEventType"/>
                </xs:sequence>
        </xs:complexType>
        <xs:simpleType name="ParamValueType">
                <xs:restriction base="xs:string">
                        <xs:enumeration value="string"/>
                        <xs:enumeration value="numeric"/>
                        <xs:enumeration value="keyword"/>
                        <xs:enumeration value="StatusStructure"/>
                </xs:restriction>
        </xs:simpleType>

        <xs:complexType name="DataType">
                <xs:sequence>
                        <xs:element name="VOEventType" type="VOEventType"/>
                        <xs:element name="WavelengthAngstroms" type="xs:string" minOccurs="0"/>
                </xs:sequence>
        </xs:complexType>

        <!-- Enumeration of types of events, using the 2-letter codes as in VOEventSpec -->
        <xs:simpleType name="VOEventType">

                <xs:restriction base="xs:string">
                        <xs:enumeration value="ar"/>
                        <xs:enumeration value="ce"/>
                        <xs:enumeration value="cd"/>
                        <xs:enumeration value="ch"/>
                        <xs:enumeration value="cw"/>
                        <xs:enumeration value="fi"/>
                        <xs:enumeration value="fe"/>
                        <xs:enumeration value="fa"/>
                        <xs:enumeration value="fl"/>
                        <xs:enumeration value="lp"/>
                        <xs:enumeration value="os"/>
                        <xs:enumeration value="ss"/>
                        <xs:enumeration value="ef"/>
                        <xs:enumeration value="cj"/>
                        <xs:enumeration value="pg"/>
                        <!-- "Other" and "Nothing Reported" included for completeness, but not 
                               expected to be used by any algorithms -->
                        <xs:enumeration value="ot"/>
                        <xs:enumeration value="nr"/>
                        <xs:enumeration value="sg"/>
                        <xs:enumeration value="sp"/>

                </xs:restriction>
        </xs:simpleType>


        <!-- New implementation of image input for algorithms, essentially a CNF with the "ands" optional. -->
        <xs:complexType name="ImageInputSet">
                <xs:sequence>
                        <xs:element name="ImageRequirement" type="ImageRequirement"
                                maxOccurs="unbounded"/>
                </xs:sequence>
        </xs:complexType>
        <xs:complexType name="ImageRequirement">
                <xs:sequence>
                        <xs:element name="ParamName" type="xs:string"/>
                        <xs:element name="Optional" type="xs:boolean"/>
                        <xs:element name="ImageChoice" type="ImageType" maxOccurs="unbounded"/>
                </xs:sequence>
        </xs:complexType>
        <xs:complexType name="ImageType">
                <xs:sequence>
                        <!-- AIA, MDI, etc.  May create enumeration eventually -->
                        <xs:element name="Instrument" type="xs:string"/>
                        <!-- Angstroms, if applicable -->
                        <xs:element name="Wavelength" type="xs:string" minOccurs="0"/>
                        <!-- Assumes square, may have to add 2nd dimension -->
                        <xs:element name="Resolution" type="xs:int"/>
                        <!-- Assume fulldisk if parameter missing-->
                        <xs:element name="FieldOfView" type="xs:string" minOccurs="0"/>
                </xs:sequence>
        </xs:complexType>

        <xs:complexType name="AlgorithmInput">
                <xs:sequence>
                        <xs:element type="VOEventType" name="InputVOEventType"/>
                        <!-- Way to specify simple conditions on a VOEvent.  This is an XQuery predicate, should be 
                          wrapped in [].  Users may specify terms from VOEventSpec.txt and the software will parse it into 
                          the full paths corresponding to their home in the VOEvent.  Note that since this is inside an xml 
                          document, users will have to use &lt and &gt instead of < and >. If absent, all VOEvents of the 
                          proper type will trigger the algorithm.  -->
                        <xs:element type="xs:string" name="Condition" minOccurs="0" maxOccurs="1"/>
                        <xs:element type="InputParameter" name="InputParameter" minOccurs="0"
                                maxOccurs="unbounded"/>
                </xs:sequence>
        </xs:complexType>

        <xs:complexType name="InputParameter">
                <xs:sequence>
                        <!-- name of Attribute in VOEventSpec.  If not isFullPath, it is the short form in VOEventSpec.txt. 
                          -->
                        <xs:element name="AttributeName" type="xs:string"/>
                        <!-- Assume that fullPath is false if not present -->
                        <xs:element name="isFullPath" type="xs:boolean" minOccurs="0"/>
                        <!-- Parameter name value is assigned to for the algorithm's call -->
                        <xs:element name="ParamName" type="xs:string"/>
                </xs:sequence>
        </xs:complexType>
        <!-- ADDED BY BENJAMIN -->
        <xs:complexType name="DataSpecificationFile">
                <xs:sequence>
                        <!-- ADD ME COMMENTS PLEASE -->
                        <xs:element name="Filename" type="xs:string"/>
                        <!-- ADD ME COMMENTS PLEASE -->
                        <xs:element name="LiveData" type="xs:boolean"/>
                        <!-- ADD ME COMMENTS PLEASE -->
                        <xs:element name="SeriesName" type="xs:string"/>
                </xs:sequence>
        </xs:complexType>
        <xs:complexType name="MovieImageParameters"> <!--Put something here please--> </xs:complexType>
</xs:schema>
